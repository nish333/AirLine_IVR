package flow;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import beans.AppConstant;
import beans.DatabaseManager;

import java.util.Date;
/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JUL-03  05:57:42 PM
 */
public class CallHistoryRecord extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JUL-03  05:57:42 PM
	 */
	public CallHistoryRecord() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("HangUp", "Default");
		next.setDebugId(341);
		return next;
	}

	
	@Override
	public void requestBegin(SCESession mySession) 
	{
	    super.requestBegin(mySession);

	    DatabaseManager dbManager = new DatabaseManager(mySession);
	    Connection connection = null;
	    CallableStatement callableStatement = null;

	    TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "ENTER INTO CALL HISTORY RECORD BACKEND LOGIC", mySession);

	    try {
	    	connection = dbManager.getConnection();
	        if (connection != null) {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Database connection established successfully.", mySession);

	            String ucid = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue();
	            String clid = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
	            String dnis = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();

	            if (ucid.isEmpty() || clid.isEmpty() || dnis.isEmpty()) {
	                TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "UCID, CLID, or DNIS is empty.", mySession);
	                return;
	            }

	            String startTimeStr = mySession.getVariableField(IProjectVariables.CALLDETAILS, IProjectVariables.CALLDETAILS_FIELD_STARTIME).getStringValue();
	            if (startTimeStr == null || startTimeStr.isEmpty()) {
	                TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Start time is empty.", mySession);
	                return;
	            }

	            SimpleDateFormat sdf = new SimpleDateFormat(AppConstant.datetimeformat);
	            Date startTime = sdf.parse(startTimeStr);

	            Date endTime = new Date();
	            mySession.getVariableField(IProjectVariables.CALLDETAILS, IProjectVariables.CALLDETAILS_FIELD_ENDTIME).setValue(sdf.format(endTime));
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Call end time: " + sdf.format(endTime), mySession);

	            long duration = (endTime.getTime() - startTime.getTime()) / 1000;
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Calculated Duration: " + duration + " seconds", mySession);

	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Database Operation for CallLog insertion Started...", mySession);

	            String sql = AppConstant.overallcallinsert;
	            callableStatement = connection.prepareCall(sql);

	            callableStatement.setString(1, ucid);
	            callableStatement.setString(2, clid);
	            callableStatement.setString(3, dnis);
	            
	            callableStatement.setString(4, AppConstant.language);
	            callableStatement.setTimestamp(5, new Timestamp(startTime.getTime()));
	            callableStatement.setTimestamp(6, new Timestamp(endTime.getTime()));
	            callableStatement.setLong(7, duration);

	            String exitlocation = mySession.getVariableField(IProjectVariables.NODE, IProjectVariables.NODE_FIELD_EXITNODE).getStringValue();
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Retrieved Exit Location: " + exitlocation, mySession);

	            String disconnectreason = AppConstant.hangup;

	            String transfervdn = mySession.getVariableField(IProjectVariables.BLINDTRANSFER).getStringValue();
	            if (transfervdn.isEmpty()) 
	            {
	                transfervdn = "NULL";
	            }
	            else
	            {
	            	transfervdn = mySession.getVariableField(IProjectVariables.BLINDTRANSFER).getStringValue();
	            }

	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Retrieved Transfer VDN: " + transfervdn, mySession);

	            
	            int MainMenuOption = mySession.getVariableField(IProjectVariables.MAIN_MENU, IProjectVariables.MAIN_MENU_FIELD_VALUE).getIntValue();
	            
	            switch (MainMenuOption) 
	            {
	                case 1:
	                    exitlocation = "NewBooking";
	                    transfervdn = mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_1).getStringValue();
	                    disconnectreason = "Transfer";
	                    break;
	                case 2:
	                    exitlocation = "ExistingBooking";
	                    break;
	                case 3:
	                    exitlocation = "Inquiries";
	                    transfervdn = mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_3).getStringValue();
	                    disconnectreason = "Transfer";
	                    break;
	                default:
	                    exitlocation = "unknown";
	                    break;
	            }

	            if (MainMenuOption == 2) 
		            {
		                int ExistingMainMenu = mySession.getVariableField(IProjectVariables.EXISTING_MAIN_MENU, IProjectVariables.EXISTING_MAIN_MENU_FIELD_VALUE).getIntValue();
		                
		                switch (ExistingMainMenu) 
		                {
		                    case 1:
		                        exitlocation = "ExistingBookingStatus";
		                        break;		                    
		                    case 2:
		                        exitlocation = "DepartureTime";
		                        break;
		                    case 3:
		                        exitlocation = "RescheduleExistingBooking";
		                        transfervdn = mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_2).getStringValue();
		                        disconnectreason = "Transfer";
		                        break;
		                    case 4:
		                        exitlocation = "LastTravelDetails";
		                        break;
		                    default:
		                        exitlocation = "unknown";
		                        disconnectreason = "HangUp";
		                        break;
		                }
		            }

	            callableStatement.setString(8, exitlocation);
	            callableStatement.setString(9, disconnectreason);
	            callableStatement.setString(10, transfervdn); 
	          

	            String appenduui = ucid + " | " + AppConstant.language;	            
	            mySession.getVariableField(IProjectVariables.PREPAREAAI).setValue(appenduui);
	            
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "PREPARE AAI: " + appenduui , mySession);
	            
	            callableStatement.setString(11, appenduui);

	            callableStatement.execute();

	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Call Log Inserted Successfully in the Database", mySession);
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Failed to establish database connection.", mySession);
	        }
	    } catch (SQLException e) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "SQL Error while inserting call history into the database: " + e.getMessage(), mySession);
	    } catch (Exception e) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error while inserting call history into the database: " + e.getMessage(), mySession);
	    } finally {
	        try {
	            if (callableStatement != null) {
	                callableStatement.close();
	            }
	            if (connection != null) {
	                connection.close();
	            }
	        } catch (SQLException e) {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error while closing resources: " + e.getMessage(), mySession);
	        }
	    }
	}

	
	
	
	

	
	

	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "ENTER INTO CALL HISTORY RECORD", "").setDebugId(415));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
