package flow;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.SCESession;

import beans.AppConstant;
import beans.DatabaseManager;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JUL-02  05:36:11 PM
 */
public class CheckingUser extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JUL-02  05:36:11 PM
	 */
	public CheckingUser() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	

	@SuppressWarnings("unused")
	@Override
	public void requestBegin(SCESession mySession) 
	{
	    if (mySession == null) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Session is null.", mySession);
	        return; 
	    }
	    
	    DatabaseManager dbManager = null;
	    Connection connection = null;
	    CallableStatement callableStatement = null;
	    ResultSet resultSet = null;

	    try
	    {
	        dbManager = new DatabaseManager(mySession);
	        if (dbManager == null) {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "DatabaseManager initialization failed.", mySession);
	            return;
	        }

	        connection = dbManager.getConnection();
	        if (connection == null) {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Database connection is null.", mySession);
	            return;
	        }
	        
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Database connection established successfully.", mySession);

	        String sql = AppConstant.checkexistinguser;
	        callableStatement = connection.prepareCall(sql);

	        IVariableField callerNumberField = mySession.getVariableField(IProjectVariables.SESSION_FIELD_ANI);
	        if (callerNumberField == null) {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "VariableField for SESSION_FIELD_ANI is null.", mySession);
	            return;
	        }

	        String VC_CALLER_NUMBER = callerNumberField.getStringValue();
	        if (VC_CALLER_NUMBER == null) {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Caller number is null.", mySession);
	            return;
	        }

	        callableStatement.setString(1, VC_CALLER_NUMBER);
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "User Caller Number Is: " + VC_CALLER_NUMBER, mySession);

	        resultSet = callableStatement.executeQuery();
	        
	        if (resultSet.next()) 
	        {
	            String countStr = resultSet.getString(1);
	            int Count = Integer.parseInt(countStr);
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "Count value: " + Count, mySession);
	            
	            if (Count > 0) 
	            {
	                mySession.getVariableField(IProjectVariables.CALLERSTATUS).setValue("Existing User");
	                TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "User with caller number " + VC_CALLER_NUMBER + " exists.", mySession);
	            } 
	            else 
	            {
	                mySession.getVariableField(IProjectVariables.CALLERSTATUS).setValue("New User");
	                TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "New user with caller number " + VC_CALLER_NUMBER + ".", mySession);
	            }
	        }
	    } 
	    catch (SQLException e) 
	    {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "SQLException: " + e.getMessage(), mySession);
	    } 
	    catch (NumberFormatException e) 
	    {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "NumberFormatException: " + e.getMessage(), mySession);
	    } 
	    catch (Exception e) 
	    {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Exception: " + e.getMessage(), mySession);
	    } 
	    finally 
	    {
	        try 
	        {
	            if (resultSet != null) resultSet.close();
	            if (callableStatement != null) callableStatement.close();
	            if (connection != null) connection.close();
	        } 
	        catch (SQLException e) 
	        {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "SQLException during resource cleanup: " + e.getMessage(), mySession);
	        }
	    }
	}

	
	    
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("InsertCallEntry", "NU");
		next.setDebugId(382);
		return next;
	}
	

	
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "ENTERED INTO CHECKING USER", "").setDebugId(562));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Count", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "0", false).setDebugId(553)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Count", "ExistingUser", true).setDebugId(558));
			actions.add(new com.avaya.sce.runtime.Next("ExistingMainMenu", "EU").setDebugId(555));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Count", "NewUser", true).setDebugId(561));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
