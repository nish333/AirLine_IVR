package flow;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;


import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import beans.AppConstant;
import beans.DatabaseManager;

import java.sql.CallableStatement;



/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JUL-12  10:30:15 AM
 */
public class Departuretime extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JUL-12  10:30:15 AM
	 */
	public Departuretime() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}




	@Override
	public void requestBegin(SCESession mySession) {
	    super.requestBegin(mySession);

	    TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "ENTER INTO DEPARTURE TIME PROMPT", mySession);

	    DatabaseManager dbManager = new DatabaseManager(mySession);
	    Connection connection = null;
	    CallableStatement callableStatement = null;
	    ResultSet resultSet = null;

	    try {
	        connection = dbManager.getConnection();

	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Database connection established successfully.", mySession);

	        String storedProc = AppConstant.departureTime;
	        callableStatement = connection.prepareCall(storedProc);

	        String customerId = mySession.getVariableField(IProjectVariables.BOOKING_ID_TIME, IProjectVariables.BOOKING_ID_TIME_FIELD_VALUE).getStringValue();
	        callableStatement.setString(1, customerId);
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Executing stored procedure: " + storedProc, mySession);

	        resultSet = callableStatement.executeQuery();

	        if (resultSet.next()) {
	            String departureTimeStr = resultSet.getString(AppConstant.departureid);
	            mySession.getVariableField(IProjectVariables.USER_INPUT).setValue(departureTimeStr);
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Database response: " + departureTimeStr, mySession);

	            if (departureTimeStr != null && departureTimeStr.length() >= 21) { 
	                try {
	                    String cleanedDepartureTimeStr = departureTimeStr.replaceAll("[^0-9]", "");
	                    
	                    String year = cleanedDepartureTimeStr.substring(0, 4);
	                    String month = cleanedDepartureTimeStr.substring(4, 6);
	                    String day = cleanedDepartureTimeStr.substring(6, 8);
	                    String hour = cleanedDepartureTimeStr.substring(8, 10);
	                    String minute = cleanedDepartureTimeStr.substring(10, 12);
	                    String second = cleanedDepartureTimeStr.substring(12, 14);

	                    TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
	                    "Parsed DEPARTURE TIME: " + cleanedDepartureTimeStr + "\n" + 
	                    "Year: " + year + "\n" + 
	                    "Month: " + month + "\n" + 
	                    "Day: " + day + "\n" + 
	                    "Hour: " + hour + "\n" + 
	                    "Minute: " + minute + "\n" + 
	                    "Second: " + second ,
	                    mySession);

	                    if (year != null && !year.isEmpty()) mySession.getVariableField(IProjectVariables.YEAR).setValue(year);
	                    if (month != null && !month.isEmpty()) mySession.getVariableField(IProjectVariables.MONTH).setValue(month);
	                    if (day != null && !day.isEmpty()) mySession.getVariableField(IProjectVariables.DATEE).setValue(day);
	                    if (hour != null && !hour.isEmpty()) mySession.getVariableField(IProjectVariables.HOURS).setValue(hour);
	                    if (minute != null && !minute.isEmpty()) mySession.getVariableField(IProjectVariables.MINUTES).setValue(minute);
	                    if (second != null && !second.isEmpty()) mySession.getVariableField(IProjectVariables.SECONDS).setValue(second);
	                } catch (StringIndexOutOfBoundsException e) {
	                    TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error parsing departure time: " + e.getMessage(), mySession);
	                }
	            } else {
	                TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Departure time string is not in the expected format: " + departureTimeStr, mySession);
	            }
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "No data found for the query.", mySession);
	            mySession.getVariableField(IProjectVariables.USER_INPUT).setValue("");
	        }
	    } catch (SQLException e) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "SQL Error while fetching data from the database: " + e.getMessage(), mySession);
	        mySession.getVariableField(IProjectVariables.USER_INPUT).setValue("");
	    } catch (Exception e) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error while fetching data from the database: " + e.getMessage(), mySession);
	        mySession.getVariableField(IProjectVariables.USER_INPUT).setValue("");
	    } finally {
	        try {
	            if (resultSet != null) {
	                resultSet.close();
	            }
	            if (callableStatement != null) {
	                callableStatement.close();
	            }
	            if (connection != null) {
	                connection.close();
	            }
	        } catch (SQLException e) {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error while closing resources: " + e.getMessage(), mySession);
	        }
	    }
	}


	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("PlaytimePrompot", "Default");
		next.setDebugId(693);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "ENTER INTO DEPARTURE TIME BACK END LOGIC", "").setDebugId(748));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
