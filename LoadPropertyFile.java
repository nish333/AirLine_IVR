package flow;

import java.util.Properties;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCERuntimeException;
import com.avaya.sce.runtimecommon.SCESession;

import beans.dataconnection;



/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JUL-05  01:03:58 PM
 */
public class LoadPropertyFile extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JUL-05  01:03:58 PM
	 */
	public LoadPropertyFile() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("DB_Operation", "Default");
		next.setDebugId(550);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
	    dataconnection dataConn = new dataconnection(mySession);
	    Properties props = dataConn.getProperties();

	    if (props == null) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Properties are null", mySession);
	    } else {
	        if (props.getProperty("db.url") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_DBURL).setValue(props.getProperty("db.url"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field db.url is null", mySession);
	        }

	        if (props.getProperty("db.user") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_DBUSER).setValue(props.getProperty("db.user"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field db.user is null", mySession);
	        }

	        if (props.getProperty("db.password") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_DBPASSWORD).setValue(props.getProperty("db.password"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field db.password is null", mySession);
	        }

	        if (props.getProperty("audiolocation") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_AUDIOLOCATION).setValue(props.getProperty("audiolocation"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field audiolocation is null", mySession);
	        }

	        if (props.getProperty("transfervdn1") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_1).setValue(props.getProperty("transfervdn1"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field transfervdn1 is null", mySession);
	        }

	        if (props.getProperty("transfervdn2") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_2).setValue(props.getProperty("transfervdn2"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field transfervdn2 is null", mySession);
	        }

	        if (props.getProperty("transfervdn3") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_3).setValue(props.getProperty("transfervdn3"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field transfervdn3 is null", mySession);
	        }

	        if (props.getProperty("retry.count") != null) {
	            mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_RETRYCOUNT).setValue(props.getProperty("retry.count"));
	        } else {
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Value for field retry.count is null", mySession);
	        }

	        TraceInfo.trace(
	            ITraceInfo.TRACE_LEVEL_INFO,
	            "DB URL: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_DBURL).getStringValue() + "\n" +
	            "DB USER: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_DBUSER).getStringValue() + "\n" +
	            "DB PASSWORD: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_DBPASSWORD).getStringValue() + "\n" +
	            "AUDIO LOCATION: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_AUDIOLOCATION).getStringValue() + "\n" +
	            "TRANSFER VDN1: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_1).getStringValue() + "\n" +
	            "TRANSFER VDN2: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_2).getStringValue() + "\n" +
	            "TRANSFER VDN3: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_3).getStringValue() + "\n" +
	            "RETRY COUNT: " + mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_RETRYCOUNT).getStringValue(),
	            mySession
	        );
	    }

	    try {
	        super.requestBegin(mySession);
	    } catch (SCERuntimeException e) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "SCERuntimeException in requestBegin: " + e.getMessage(), mySession);
	    } catch (Exception e) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in requestBegin: " + e.getMessage(), mySession);
	    }
	}

	 
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "ENTER INTO LOAD PROPERTY FILE", "").setDebugId(563));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
