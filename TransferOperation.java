package flow;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JUL-09  01:31:30 PM
 */
public class TransferOperation extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JUL-09  01:31:30 PM
	 */
	public TransferOperation() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("AgentTransfer");
		next.setDebugId(870);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	
	
//	public void requestBegin1(SCESession mySession)
//	{
//		mySession.getVariableField(IProjectVariables.NODE, IProjectVariables.NODE_FIELD_EXITNODE).getStringValue();
//		mySession.getVariableField(IProjectVariables.NODE,IProjectVariables.NODE_FIELD_EXITNODE).setValue("TransferOperation");
//		super.requestBegin(mySession);
//	}

	
	@Override
	public void requestBegin(SCESession mySession) 
	{
	    super.requestBegin(mySession);

	    if (mySession == null) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Session is null", mySession);
	        return;
	    }

	    TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "Agent Transfer Backend Logic", mySession);

	    try {
	        String mainMenuOptionStr = mySession.getVariableField(IProjectVariables.MAIN_MENU, IProjectVariables.MAIN_MENU_FIELD_VALUE).getStringValue();
	        String existingMainMenuStr = mySession.getVariableField(IProjectVariables.EXISTING_MAIN_MENU, IProjectVariables.EXISTING_MAIN_MENU_FIELD_VALUE).getStringValue();
	        
	        int mainMenuOption = -1;
	        int existingMainMenu = -1;

	        if (mainMenuOptionStr != null && !mainMenuOptionStr.isEmpty()) {
	            mainMenuOption = Integer.parseInt(mainMenuOptionStr);
	        }

	        if (existingMainMenuStr != null && !existingMainMenuStr.isEmpty()) {
	            existingMainMenu = Integer.parseInt(existingMainMenuStr);
	        }

	        String blindTransfer = "";

	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, 
	                "Main Menu Choice: " + mainMenuOption + "\n" +
	                "Existing Menu Choice: " + existingMainMenu,
	                mySession);

	        if (mainMenuOption == 1) 
	        {
	            blindTransfer = mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_1).getStringValue();
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "Blind Transfer for Main Menu Choice 1: " + blindTransfer, mySession);
	        } 
	        else if (mainMenuOption == 2) 
	        {
	            if (existingMainMenu == 3) 
	            {
	                blindTransfer = mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_2).getStringValue();
	                TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "Blind Transfer for Main Menu Choice 2 and Existing Menu Choice 3: " + blindTransfer, mySession);
	            }
	        } 
	        else 
	        {
	            blindTransfer = mySession.getVariableField(IProjectVariables.PROPERTIES, IProjectVariables.PROPERTIES_FIELD_TRANSFERVDN_3).getStringValue();
	            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "Blind Transfer for Other Main Menu Choices: " + blindTransfer, mySession);
	        }

	        mySession.getVariableField(IProjectVariables.BLINDTRANSFER).setValue(blindTransfer);
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "Final Blind Transfer Value Set: " + blindTransfer, mySession);
	    } catch (Exception e) {
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error in requestBegin: " + e.getMessage(), mySession);
	    }
	}



	
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-JUL-31  05:04:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "ENTER INTO AGENT TRANSFER BACKEND LOGIC", "").setDebugId(869));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
